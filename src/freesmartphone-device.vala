/* Generated by vala-dbus-binding-tool. Do not modify! */
/* Generated with: vala-dbus-binding-tool --api-path=../fso/specs.git/xml/ --directory=src/ --strip-namespace=org --rename-namespace=freedesktop:FreeDesktop --rename-namespace=freesmartphone:FreeSmartphone */
using DBus;
using GLib;

namespace FreeSmartphone {

	namespace Device {

		[DBus (name = "org.freesmartphone.Device.Input")]
		public interface Input : GLib.Object {

			public signal void event(string name, string action, int seconds);
		}

		[DBus (name = "org.freesmartphone.Device.LED")]
		public interface LED : GLib.Object {

			public abstract void set_brightness(int brightness) throws DBus.Error;

			public abstract void set_blinking(int on_duration, int off_duration) throws DBus.Error;

			public abstract void set_networking(string interface, string mode) throws DBus.Error;
		}

		[DBus (name = "org.freesmartphone.Device.PowerControl")]
		public interface PowerControl : GLib.Object {

			public abstract bool get_power() throws DBus.Error;

			public abstract void set_power(bool on) throws DBus.Error;

			public signal void power(bool on);
		}

		[DBus (name = "org.freesmartphone.Device.PowerSupply")]
		public interface PowerSupply : GLib.Object {

			public abstract GLib.HashTable<string, GLib.Value?> get_info() throws DBus.Error;

			public abstract int get_capacity() throws DBus.Error;

			public abstract string get_power_status() throws DBus.Error;

			public signal void power_status(string status);

			public signal void capacity(int energy);
		}

		[DBus (name = "org.freesmartphone.Device.Display")]
		public interface Display : GLib.Object {

			public abstract GLib.HashTable<string, GLib.Value?> get_info() throws DBus.Error;

			public abstract int get_brightness() throws DBus.Error;

			public abstract void set_brightness(int brightness) throws DBus.Error;

			public abstract bool get_backlight_power() throws DBus.Error;

			public abstract void set_backlight_power(bool power) throws DBus.Error;
		}

		[DBus (name = "org.freesmartphone.Device.RealtimeClock")]
		public interface RealtimeClock : GLib.Object {

			public abstract int get_current_time() throws DBus.Error;

			public abstract void set_current_time(int time) throws DBus.Error;

			public abstract int get_wakeup_time() throws DBus.Error;

			public abstract void set_wakeup_time(bool time) throws DBus.Error;
		}

		[DBus (name = "org.freesmartphone.Device.Audio")]
		public interface Audio : GLib.Object {

			public abstract GLib.HashTable<string, GLib.Value?> get_info() throws DBus.Error;

			public abstract string[] get_supported_formats() throws DBus.Error;

			public abstract string[] get_available_scenarios() throws DBus.Error;

			public abstract void play_sound(string id, int loop, int length) throws DBus.Error;

			public abstract void stop_sound(string id) throws DBus.Error;

			public abstract void stop_all_sounds() throws DBus.Error;

			public signal void sound_status(string id, string status, GLib.HashTable<string, GLib.Value?> properties);

			public abstract string get_scenario() throws DBus.Error;

			public abstract void set_scenario(string scenario) throws DBus.Error;

			public abstract void push_scenario(string scenario) throws DBus.Error;

			public abstract string pull_scenario() throws DBus.Error;

			public signal void scenario(string scenario, string reason);
		}

		[DBus (name = "org.freesmartphone.Device.IdleNotifier")]
		public interface IdleNotifier : GLib.Object {

			public abstract string get_state() throws DBus.Error;

			public abstract GLib.HashTable<string, int> get_timeouts() throws DBus.Error;

			public abstract void set_timeout(string state, int timeout) throws DBus.Error;

			public abstract void set_state(string status) throws DBus.Error;

			public signal void state(string status);
		}
	}
}
