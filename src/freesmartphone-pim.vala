/* Generated by vala-dbus-binding-tool 0.1.5. Do not modify! */
/* Generated with: /usr/local/bin/vala-dbus-binding-tool --api-path=/local/pkg/fso/specs/xml/ --directory=./ --strip-namespace=org --rename-namespace=freedesktop:FreeDesktop --rename-namespace=freesmartphone:FreeSmartphone */
using DBus;
using GLib;

namespace FreeSmartphone {

	namespace PIM {

		[DBus (name = "org.freesmartphone.PIM.Calls")]
		public interface Calls : GLib.Object {

			public abstract async string add(GLib.HashTable<string, GLib.Value?> call_data) throws DBus.Error;

			public abstract async string get_single_entry_single_field(GLib.HashTable<string, GLib.Value?> query, string field) throws DBus.Error;

			public abstract async string query(GLib.HashTable<string, GLib.Value?> query) throws DBus.Error;

			public abstract async int get_new_missed_calls() throws DBus.Error;

			public signal void new_call(string call_path);

			public signal void incoming_call(string call_path);

			public signal void new_missed_calls(int amount);
		}

		public Calls get_calls_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as Calls;
		}
		[DBus (name = "org.freesmartphone.PIM.MessageQuery")]
		public interface MessageQuery : GLib.Object {

			public abstract async int get_result_count() throws DBus.Error;

			public abstract async void rewind() throws DBus.Error;

			public abstract async void skip(int count) throws DBus.Error;

			public abstract async string get_message_path() throws DBus.Error;

			public abstract async GLib.HashTable<string, GLib.Value?> get_result() throws DBus.Error;

			public abstract async GLib.HashTable<string, GLib.Value?>[] get_multiple_results(int count) throws DBus.Error;

			public abstract async void dispose_() throws DBus.Error;

			public signal void message_added(string message_path);
		}

		public MessageQuery get_message_query_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as MessageQuery;
		}
		[DBus (name = "org.freesmartphone.PIM.Notes")]
		public interface Notes : GLib.Object {

			public abstract async string add(GLib.HashTable<string, GLib.Value?> note_data) throws DBus.Error;

			public abstract async string[] get_used_tags() throws DBus.Error;

			public abstract async string get_single_entry_single_field(GLib.HashTable<string, GLib.Value?> query, string field) throws DBus.Error;

			public abstract async string query(GLib.HashTable<string, GLib.Value?> query) throws DBus.Error;

			public signal void new_note(string note_path);

			public signal void new_tag(string tag);

			public signal void tag_removed(string tag);
		}

		public Notes get_notes_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as Notes;
		}
		[DBus (name = "org.freesmartphone.PIM.Task")]
		public interface Task : GLib.Object {

			public abstract async GLib.HashTable<string, GLib.Value?> get_content() throws DBus.Error;

			public abstract async GLib.HashTable<string, GLib.Value?> get_multiple_fields(string field_list) throws DBus.Error;

			public abstract  string[] get_used_backends() throws DBus.Error;

			public abstract async void update(GLib.HashTable<string, GLib.Value?> task_data) throws DBus.Error;

			public abstract async void delete() throws DBus.Error;
		}

		public Task get_task_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as Task;
		}
		[DBus (name = "org.freesmartphone.PIM.Types")]
		public interface Types : GLib.Object {

			public abstract async string[] list() throws DBus.Error;
		}

		public Types get_types_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as Types;
		}
		[DBus (name = "org.freesmartphone.PIM.CallQuery")]
		public interface CallQuery : GLib.Object {

			public abstract async int get_result_count() throws DBus.Error;

			public abstract async void rewind() throws DBus.Error;

			public abstract async void skip(int count) throws DBus.Error;

			public abstract async string get_call_path() throws DBus.Error;

			public abstract async GLib.HashTable<string, GLib.Value?> get_result() throws DBus.Error;

			public abstract async GLib.HashTable<string, GLib.Value?>[] get_multiple_results(int count) throws DBus.Error;

			public abstract async void dispose_() throws DBus.Error;

			public signal void call_added(string call_path);
		}

		public CallQuery get_call_query_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as CallQuery;
		}
		[DBus (name = "org.freesmartphone.PIM.MessageFolder")]
		public interface MessageFolder : GLib.Object {

			public abstract async int get_message_count() throws DBus.Error;

			public abstract async string[] get_message_paths(int first, int count) throws DBus.Error;

			public signal void message_moved(string message_path, string new_folder);
		}

		public MessageFolder get_message_folder_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as MessageFolder;
		}
		[DBus (name = "org.freesmartphone.PIM.Fields")]
		public interface Fields : GLib.Object {

			public abstract async void add_field(string name, string type) throws DBus.Error;

			public abstract async void delete_field(string name) throws DBus.Error;

			public abstract  string get_type_(string name) throws DBus.Error;

			public abstract async GLib.HashTable<string, string> list_fields() throws DBus.Error;

			public abstract async string[] list_fields_with_type(string type) throws DBus.Error;
		}

		public Fields get_fields_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as Fields;
		}
		[DBus (name = "org.freesmartphone.PIM.Sources")]
		public interface Sources : GLib.Object {

			public abstract async void init_all_entries() throws DBus.Error;

			public abstract async int get_entry_count() throws DBus.Error;

			public abstract async string[] get_domains() throws DBus.Error;

			public abstract async string get_default_backend(string domain) throws DBus.Error;

			public abstract async string[] get_backends() throws DBus.Error;
		}

		public Sources get_sources_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as Sources;
		}
		[DBus (name = "org.freesmartphone.PIM.Contact")]
		public interface Contact : GLib.Object {

			public abstract async GLib.HashTable<string, GLib.Value?> get_content() throws DBus.Error;

			public abstract async GLib.HashTable<string, GLib.Value?> get_multiple_fields(string field_list) throws DBus.Error;

			public abstract async string[] get_used_backends() throws DBus.Error;

			public abstract async void update(GLib.HashTable<string, GLib.Value?> contact_data) throws DBus.Error;

			public abstract async void delete() throws DBus.Error;

			public signal void contact_deleted();

			public signal void contact_updated(GLib.HashTable<string, GLib.Value?> data);
		}

		public Contact get_contact_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as Contact;
		}
		[DBus (name = "org.freesmartphone.PIM.ContactQuery")]
		public interface ContactQuery : GLib.Object {

			public abstract async int get_result_count() throws DBus.Error;

			public abstract async void rewind() throws DBus.Error;

			public abstract async void skip(int count) throws DBus.Error;

			public abstract async string get_contact_path() throws DBus.Error;

			public abstract async GLib.HashTable<string, GLib.Value?> get_result() throws DBus.Error;

			public abstract async GLib.HashTable<string, GLib.Value?>[] get_multiple_results(int count) throws DBus.Error;

			public abstract async void dispose_() throws DBus.Error;

			public signal void contact_added(string contact_path);
		}

		public ContactQuery get_contact_query_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as ContactQuery;
		}
		[DBus (name = "org.freesmartphone.PIM.Contacts")]
		public interface Contacts : GLib.Object {

			public abstract async string add(GLib.HashTable<string, GLib.Value?> contact_data) throws DBus.Error;

			public abstract async string get_single_entry_single_field(GLib.HashTable<string, GLib.Value?> query, string field) throws DBus.Error;

			public abstract async string query(GLib.HashTable<string, GLib.Value?> query) throws DBus.Error;

			public signal void new_contact(string contact_path);

			public signal void updated_contact(string contact_path, GLib.HashTable<string, GLib.Value?> contact_data);

			public signal void deleted_contact(string contact_path);
		}

		public Contacts get_contacts_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as Contacts;
		}
		[DBus (name = "org.freesmartphone.PIM.TaskQuery")]
		public interface TaskQuery : GLib.Object {

			public abstract async int get_result_count() throws DBus.Error;

			public abstract async void rewind() throws DBus.Error;

			public abstract async void skip(int count) throws DBus.Error;

			public abstract async string get_task_path() throws DBus.Error;

			public abstract async GLib.HashTable<string, GLib.Value?> get_result() throws DBus.Error;

			public abstract  GLib.HashTable<string, GLib.Value?>[] get_multiple_results(int count) throws DBus.Error;

			public abstract async void dispose_() throws DBus.Error;
		}

		public TaskQuery get_task_query_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as TaskQuery;
		}
		[DBus (name = "org.freesmartphone.PIM.Messages")]
		public interface Messages : GLib.Object {

			public abstract async string add(GLib.HashTable<string, GLib.Value?> message_data) throws DBus.Error;

			public abstract async string add_incoming(GLib.HashTable<string, GLib.Value?> message_data) throws DBus.Error;

			public abstract async string get_single_entry_single_field(GLib.HashTable<string, GLib.Value?> query, string field) throws DBus.Error;

			public abstract async string query(GLib.HashTable<string, GLib.Value?> query) throws DBus.Error;

			public abstract async string[] get_folder_names() throws DBus.Error;

			public abstract async string get_folder_path_from_name(string folder_name) throws DBus.Error;

			public abstract async int get_unread_messages() throws DBus.Error;

			public signal void new_message(string message_path);

			public signal void incoming_message(string message_path);

			public signal void unread_messages(int amount);
		}

		public Messages get_messages_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as Messages;
		}
		[DBus (name = "org.freesmartphone.PIM.Tasks")]
		public interface Tasks : GLib.Object {

			public abstract async string add(GLib.HashTable<string, GLib.Value?> task_data) throws DBus.Error;

			public abstract async string get_single_task_single_field(GLib.HashTable<string, GLib.Value?> query, string field) throws DBus.Error;

			public abstract async string query(GLib.HashTable<string, GLib.Value?> query) throws DBus.Error;

			public signal void new_task(string task_path);

			public signal void unfinished_tasks(int amount);
		}

		public Tasks get_tasks_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as Tasks;
		}
		[DBus (name = "org.freesmartphone.PIM.DateQuery")]
		public interface DateQuery : GLib.Object {

			public abstract async int get_result_count() throws DBus.Error;

			public abstract async void rewind() throws DBus.Error;

			public abstract async void skip(int count) throws DBus.Error;

			public abstract async string get_date_path() throws DBus.Error;

			public abstract async GLib.HashTable<string, GLib.Value?> get_result() throws DBus.Error;

			public abstract async GLib.HashTable<string, GLib.Value?>[] get_multiple_results(int count) throws DBus.Error;

			public abstract async void dispose_() throws DBus.Error;

			public signal void date_added(string date_path);
		}

		public DateQuery get_date_query_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as DateQuery;
		}
		[DBus (name = "org.freesmartphone.PIM.Source")]
		public interface Source : GLib.Object {

			public abstract async string get_name() throws DBus.Error;

			public abstract async string get_status() throws DBus.Error;

			public abstract async string[] get_supported_p_i_m_domains() throws DBus.Error;

			public abstract async void enable() throws DBus.Error;

			public abstract async void disable() throws DBus.Error;

			public abstract async bool get_enabled() throws DBus.Error;

			public abstract async bool get_initialized() throws DBus.Error;

			public abstract async string[] get_properties() throws DBus.Error;

			public abstract async void set_as_default(string domain) throws DBus.Error;

			public abstract async bool synchronize() throws DBus.Error;
		}

		public Source get_source_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as Source;
		}
		[DBus (name = "org.freesmartphone.PIM.Dates")]
		public interface Dates : GLib.Object {

			public abstract async string add(GLib.HashTable<string, GLib.Value?> date_data) throws DBus.Error;

			public abstract async string get_single_entry_single_field(GLib.HashTable<string, GLib.Value?> query, string field) throws DBus.Error;

			public abstract async string query(GLib.HashTable<string, GLib.Value?> query) throws DBus.Error;

			public signal void new_date(string date_path);
		}

		public Dates get_dates_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as Dates;
		}
		[DBus (name = "org.freesmartphone.PIM.Call")]
		public interface Call : GLib.Object {

			public abstract async GLib.HashTable<string, GLib.Value?> get_content() throws DBus.Error;

			public abstract async GLib.HashTable<string, GLib.Value?> get_multiple_fields(string field_list) throws DBus.Error;

			public abstract async string[] get_used_backends() throws DBus.Error;

			public abstract async void update(GLib.HashTable<string, GLib.Value?> call_data) throws DBus.Error;

			public abstract async void delete() throws DBus.Error;

			public signal void call_deleted();

			public signal void call_updated(GLib.HashTable<string, GLib.Value?> data);
		}

		public Call get_call_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as Call;
		}
		[DBus (name = "org.freesmartphone.PIM.Message")]
		public interface Message : GLib.Object {

			public abstract async GLib.HashTable<string, GLib.Value?> get_content() throws DBus.Error;

			public abstract async void get_multiple_fields(string field_list) throws DBus.Error;

			public abstract async void move_to_folder(string folder_name) throws DBus.Error;

			public abstract async void update(GLib.HashTable<string, GLib.Value?> message_data) throws DBus.Error;

			public abstract async void delete() throws DBus.Error;

			public signal void message_deleted();

			public signal void message_updated(GLib.HashTable<string, GLib.Value?> data);
		}

		public Message get_message__proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as Message;
		}
		[DBus (name = "org.freesmartphone.PIM.Note")]
		public interface Note : GLib.Object {

			public abstract async GLib.HashTable<string, GLib.Value?> get_content() throws DBus.Error;

			public abstract async GLib.HashTable<string, GLib.Value?> get_multiple_fields(string field_list) throws DBus.Error;

			public abstract async string[] get_used_backends() throws DBus.Error;

			public abstract async void update(GLib.HashTable<string, GLib.Value?> note_data) throws DBus.Error;

			public abstract async void delete() throws DBus.Error;

			public signal void note_deleted();

			public signal void note_updated(GLib.HashTable<string, GLib.Value?> data);
		}

		public Note get_note_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as Note;
		}
		[DBus (name = "org.freesmartphone.PIM.NoteQuery")]
		public interface NoteQuery : GLib.Object {

			public abstract async int get_result_count() throws DBus.Error;

			public abstract async void rewind() throws DBus.Error;

			public abstract async void skip(int count) throws DBus.Error;

			public abstract async string get_note_path() throws DBus.Error;

			public abstract async GLib.HashTable<string, GLib.Value?> get_result() throws DBus.Error;

			public abstract async GLib.HashTable<string, GLib.Value?>[] get_multiple_results(int count) throws DBus.Error;

			public abstract async void dispose_() throws DBus.Error;

			public signal void note_added(string note_path);
		}

		public NoteQuery get_note_query_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as NoteQuery;
		}
		[DBus (name = "org.freesmartphone.PIM.Date")]
		public interface Date : GLib.Object {

			public abstract async GLib.HashTable<string, GLib.Value?> get_content() throws DBus.Error;

			public abstract async GLib.HashTable<string, GLib.Value?> get_multiple_fields(string field_list) throws DBus.Error;

			public abstract async string[] get_used_backends() throws DBus.Error;

			public abstract async void update(GLib.HashTable<string, GLib.Value?> date_data) throws DBus.Error;

			public abstract async void delete() throws DBus.Error;

			public signal void date_deleted();

			public signal void date_updated(GLib.HashTable<string, GLib.Value?> data);
		}

		public Date get_date_proxy(DBus.Connection con, string busname, DBus.ObjectPath path) {
			return con.get_object(busname, path) as Date;
		}	}
}
