/* Generated by vala-dbus-binding-tool. Do not modify! */
/* Generated with: /usr/bin/vala-dbus-binding-tool --api-path=../fso/specs/xml/ --output=src/fso-dbus-interfaces.vala --strip-namespace=org --rename-namespace=freedesktop:FreeDesktop --rename-namespace=freesmartphone:FreeSmartphone */
using DBus;
using GLib;

namespace FreeDesktop {

	namespace Gypsy {

		[DBus (name = "org.freedesktop.Gypsy.Course")]
		public interface Course : GLib.Object {

			public abstract void get_course(out int fields, out int tstamp, out double speed, out double heading, out double climb) throws DBus.Error;

			public signal void course_changed();
		}

		[DBus (name = "org.freedesktop.Gypsy.Accuracy")]
		public interface Accuracy : GLib.Object {

			public abstract void get_accuracy(out int fields, out double pdop, out double hdop, out double vdop) throws DBus.Error;

			public signal void accuracy_changed();
		}

		[DBus (name = "org.freedesktop.Gypsy.Time")]
		public interface Time : GLib.Object {

			public abstract int get_time() throws DBus.Error;

			public signal void time_changed();
		}

		[DBus (name = "org.freedesktop.Gypsy.Device")]
		public interface Device : GLib.Object {

			public abstract bool get_connection_status() throws DBus.Error;

			public abstract int get_fix_status() throws DBus.Error;

			public abstract void start() throws DBus.Error;

			public abstract void stop() throws DBus.Error;

			public signal void connection_status_changed();

			public signal void fix_status_changed();
		}

		[DBus (name = "org.freedesktop.Gypsy.Position")]
		public interface Position : GLib.Object {

			public abstract void get_position(out int fields, out int tstamp, out double lat, out double lon, out double alt) throws DBus.Error;

			public signal void position_changed();
		}
	}
}

namespace FreeSmartphone {

	[DBus (name = "org.freesmartphone.Resource")]
	public interface Resource : GLib.Object {

		public abstract void enable() throws DBus.Error;

		public abstract void disable() throws DBus.Error;

		public abstract void suspend() throws DBus.Error;

		public abstract void resume() throws DBus.Error;
	}

	[DBus (name = "org.freesmartphone.Usage")]
	public interface Usage : GLib.Object {

		public abstract string[] list_resources() throws DBus.Error;

		public abstract string get_resource_policy(string name) throws DBus.Error;

		public abstract void set_resource_policy(string name, string policy) throws DBus.Error;

		public abstract bool get_resource_state(string name) throws DBus.Error;

		public abstract string[] get_resource_users(string name) throws DBus.Error;

		public abstract void request_resource(string name) throws DBus.Error;

		public abstract void release_resource(string name) throws DBus.Error;

		public abstract void suspend() throws DBus.Error;

		public abstract void shutdown() throws DBus.Error;

		public abstract void reboot() throws DBus.Error;

		public signal void resource_available(string name, bool availability);

		public signal void resource_changed(string name, bool state, GLib.HashTable<string, GLib.Value?> attributes);

		public signal void system_action(string action);
	}

	[DBus (name = "org.freesmartphone.Events")]
	public interface Events : GLib.Object {

		public abstract void add_rule(string rule) throws DBus.Error;

		public abstract void remove_rule(string name) throws DBus.Error;

		public abstract void trigger_test(string name, bool value) throws DBus.Error;
	}

	namespace Phone {

		[DBus (name = "org.freesmartphone.Phone")]
		public interface Phone : GLib.Object {

			public abstract string[] init_protocols() throws DBus.Error;

			public abstract ObjectPath create_call(string number, string protocol, bool force) throws DBus.Error;

			public signal void incoming(ObjectPath call);
		}

		[DBus (name = "org.freesmartphone.Phone.Call")]
		public interface Call : GLib.Object {

			public abstract string get_peer() throws DBus.Error;

			public abstract string initiate() throws DBus.Error;

			public abstract string activate() throws DBus.Error;

			public abstract string release() throws DBus.Error;

			public abstract string get_status() throws DBus.Error;

			public abstract void remove() throws DBus.Error;

			public signal void incoming();

			public signal void outgoing();

			public signal void released();

			public signal void activated();
		}
	}

	namespace Time {

		[DBus (name = "org.freesmartphone.Time.Alarm")]
		public interface Alarm : GLib.Object {

			public abstract void clear_alarm(string busname) throws DBus.Error;

			public abstract void set_alarm(string busname, int timestamp) throws DBus.Error;
		}
	}

	namespace Preferences {

		[DBus (name = "org.freesmartphone.Preferences.Service")]
		public interface Service : GLib.Object {

			public abstract string[] get_keys() throws DBus.Error;

			public abstract GLib.Value get_value(string key) throws DBus.Error;

			public abstract void set_value(string key, GLib.Value value) throws DBus.Error;

			public abstract bool is_profilable(string key) throws DBus.Error;

			public abstract string get_type_(string key) throws DBus.Error;

			public signal void notify(string key, GLib.Value value);
		}

		[DBus (name = "org.freesmartphone.Preferences")]
		public interface Preferences : GLib.Object {

			public abstract string[] get_services() throws DBus.Error;

			public abstract ObjectPath get_service(string name) throws DBus.Error;

			public abstract string[] get_profiles() throws DBus.Error;

			public abstract string get_profile() throws DBus.Error;

			public abstract void set_profile(string profile) throws DBus.Error;
		}
	}

	namespace Device {

		[DBus (name = "org.freesmartphone.Device.Input")]
		public interface Input : GLib.Object {

			public signal void event(string name, string action, int seconds);
		}

		[DBus (name = "org.freesmartphone.Device.LED")]
		public interface LED : GLib.Object {

			public abstract void set_brightness(int brightness) throws DBus.Error;

			public abstract void set_blinking(int on_duration, int off_duration) throws DBus.Error;

			public abstract void set_networking(string interface, string mode) throws DBus.Error;
		}

		[DBus (name = "org.freesmartphone.Device.PowerControl")]
		public interface PowerControl : GLib.Object {

			public abstract bool get_power() throws DBus.Error;

			public abstract void set_power(bool on) throws DBus.Error;

			public signal void power(bool on);
		}

		[DBus (name = "org.freesmartphone.Device.PowerSupply")]
		public interface PowerSupply : GLib.Object {

			public abstract GLib.HashTable<string, GLib.Value?> get_info() throws DBus.Error;

			public abstract int get_capacity() throws DBus.Error;

			public abstract string get_power_status() throws DBus.Error;

			public signal void power_status(string status);

			public signal void capacity(string status);
		}

		[DBus (name = "org.freesmartphone.Device.Display")]
		public interface Display : GLib.Object {

			public abstract GLib.HashTable<string, GLib.Value?> get_info() throws DBus.Error;

			public abstract int get_brightness() throws DBus.Error;

			public abstract void set_brightness(int brightness) throws DBus.Error;

			public abstract bool get_backlight_power() throws DBus.Error;

			public abstract void set_backlight_power(bool power) throws DBus.Error;
		}

		[DBus (name = "org.freesmartphone.Device.RealtimeClock")]
		public interface RealtimeClock : GLib.Object {

			public abstract int get_current_time() throws DBus.Error;

			public abstract void set_current_time(int time) throws DBus.Error;

			public abstract int get_wakeup_time() throws DBus.Error;

			public abstract void set_wakeup_time(bool time) throws DBus.Error;
		}

		[DBus (name = "org.freesmartphone.Device.Audio")]
		public interface Audio : GLib.Object {

			public abstract GLib.HashTable<string, GLib.Value?> get_info() throws DBus.Error;

			public abstract string[] get_supported_formats() throws DBus.Error;

			public abstract string[] get_available_scenarios() throws DBus.Error;

			public abstract void play_sound(string id, int loop, int length) throws DBus.Error;

			public abstract void stop_sound(string id) throws DBus.Error;

			public abstract void stop_all_sounds() throws DBus.Error;

			public signal void sound_status(string id, string status, GLib.HashTable<string, GLib.Value?> properties);

			public abstract string get_scenario() throws DBus.Error;

			public abstract void set_scenario(string scenario) throws DBus.Error;

			public abstract void push_scenario(string scenario) throws DBus.Error;

			public abstract string pull_scenario() throws DBus.Error;

			public signal void scenario(string scenario, string reason);
		}

		[DBus (name = "org.freesmartphone.Device.IdleNotifier")]
		public interface IdleNotifier : GLib.Object {

			public abstract string get_state() throws DBus.Error;

			public abstract GLib.HashTable<string, int> get_timeouts() throws DBus.Error;

			public abstract void set_timeout(string state, int timeout) throws DBus.Error;

			public abstract void set_state(string status) throws DBus.Error;

			public signal void state(string status);
		}
	}

	namespace GSM {

		[DBus (name = "org.freesmartphone.GSM.PDP")]
		public interface PDP : GLib.Object {

			public abstract string[] list_gprs_classes() throws DBus.Error;

			public abstract string get_current_gprs_class() throws DBus.Error;

			public abstract void set_current_gprs_class(string device_class) throws DBus.Error;

			public abstract GLib.HashTable<string, GLib.Value?> get_network_status() throws DBus.Error;

			public signal void network_status(GLib.HashTable<string, GLib.Value?> status);

			public abstract int activate_context(string apn, string username, string password) throws DBus.Error;

			public abstract void deactivate_context(int index) throws DBus.Error;

			public abstract string get_context_status(int index) throws DBus.Error;

			public signal void context_status(int id, string status, GLib.HashTable<string, GLib.Value?> properties);
		}

		[DBus (name = "org.freesmartphone.GSM.HZ")]
		public interface HZ : GLib.Object {

			public abstract string[] get_known_home_zones() throws DBus.Error;

			public abstract string get_home_zone_status() throws DBus.Error;

			public signal void home_zone_status(string name);
		}

		[DBus (name = "org.freesmartphone.GSM.Monitor")]
		public interface Monitor : GLib.Object {

			public abstract GLib.HashTable<string, GLib.Value?> get_serving_cell_information() throws DBus.Error;

			public abstract MonitorNeighbourCell[] get_neighbour_cell_information() throws DBus.Error;
		}

		public struct MonitorNeighbourCell {
			public GLib.HashTable<string, GLib.Value?> attr1;
		}

		[DBus (name = "org.freesmartphone.GSM.MUX")]
		public interface MUX : GLib.Object {

			public abstract void set_power(string origin, bool on) throws DBus.Error;

			public abstract bool get_power(string origin) throws DBus.Error;

			public abstract void reset(string origin) throws DBus.Error;

			public abstract string alloc_channel(string origin) throws DBus.Error;
		}

		[DBus (name = "org.freesmartphone.GSM.Device")]
		public interface Device : GLib.Object {

			public abstract GLib.HashTable<string, GLib.Value?> get_info() throws DBus.Error;

			public abstract bool get_antenna_power() throws DBus.Error;

			public abstract void set_antenna_power(bool antenna_power) throws DBus.Error;

			public abstract GLib.HashTable<string, GLib.Value?> get_features() throws DBus.Error;

			public abstract int get_speaker_volume() throws DBus.Error;

			public abstract void set_speaker_volume(int volume) throws DBus.Error;

			public abstract bool get_microphone_muted() throws DBus.Error;

			public abstract void set_microphone_muted(bool muted) throws DBus.Error;

			public abstract bool get_sim_buffers_sms() throws DBus.Error;

			public abstract void set_sim_buffers_sms(bool sim_buffers_sms) throws DBus.Error;
		}

		[DBus (name = "org.freesmartphone.GSM.Call")]
		public interface Call : GLib.Object {

			public abstract void emergency(string number) throws DBus.Error;

			public signal void call_status(int id, string status, GLib.HashTable<string, GLib.Value?> properties);

			public abstract void activate(int id) throws DBus.Error;

			public abstract void activate_conference(int id) throws DBus.Error;

			public abstract void release(int id) throws DBus.Error;

			public abstract void hold_active() throws DBus.Error;

			public abstract void join() throws DBus.Error;

			public abstract void transfer(string number) throws DBus.Error;

			public abstract void release_held() throws DBus.Error;

			public abstract void release_all() throws DBus.Error;

			public abstract int initiate(string number, string type) throws DBus.Error;

			public abstract CallStatus[] list_calls() throws DBus.Error;

			public abstract void send_dtmf(string tones) throws DBus.Error;
		}

		public struct CallStatus {
			public int attr1;
			public string attr2;
			public GLib.HashTable<string, GLib.Value?> attr3;
		}

		[DBus (name = "org.freesmartphone.GSM.Network")]
		public interface Network : GLib.Object {

			public abstract void register_() throws DBus.Error;

			public abstract void unregister() throws DBus.Error;

			public abstract GLib.HashTable<string, GLib.Value?> get_status() throws DBus.Error;

			public signal void status(GLib.HashTable<string, GLib.Value?> status);

			public abstract int get_signal_strength() throws DBus.Error;

			public signal void signal_strength(int signal_strength);

			public abstract NetworkProvider[] list_providers() throws DBus.Error;

			public abstract void register_with_provider(int operator_code) throws DBus.Error;

			public abstract void get_network_country_code(out string dial_code, out string country_name) throws DBus.Error;

			public abstract GLib.HashTable<string, GLib.Value?> get_call_forwarding(string reason) throws DBus.Error;

			public abstract void enable_call_forwarding(string reason, string class_, string number, int timeout) throws DBus.Error;

			public abstract void disable_call_forwarding(string reason, string class_) throws DBus.Error;

			public abstract void set_calling_identification(string visible) throws DBus.Error;

			public abstract string get_calling_identification() throws DBus.Error;

			public abstract void send_ussd_request(string request) throws DBus.Error;

			public signal void incoming_ussd(string mode, string message_);

			public signal void cipher_status(string gsm, string gprs);
		}

		public struct NetworkProvider {
			public int attr1;
			public string attr2;
			public string attr3;
			public string attr4;
			public string attr5;
		}

		[DBus (name = "org.freesmartphone.GSM.SMS")]
		public interface SMS : GLib.Object {

			public abstract void send_message(string recipient_number, string contents, GLib.HashTable<string, GLib.Value?> properties, out int transaction_index, out string timestamp) throws DBus.Error;

			public signal void incoming_message(string sender_number, string contents, GLib.HashTable<string, GLib.Value?> properties);
		}

		[DBus (name = "org.freesmartphone.GSM.CB")]
		public interface CB : GLib.Object {

			public abstract string get_cell_broadcast_subscriptions() throws DBus.Error;

			public abstract void set_cell_broadcast_subscriptions(string channels) throws DBus.Error;

			public signal void incoming_cell_broadcast(int serial, int channel, int encoding, int page, string data);
		}

		[DBus (name = "org.freesmartphone.GSM.SIM")]
		public interface SIM : GLib.Object {

			public abstract string get_auth_status() throws DBus.Error;

			public signal void auth_status(string status);

			public abstract void send_auth_code(string pin) throws DBus.Error;

			public abstract void unlock(string puk, string new_pin) throws DBus.Error;

			public abstract void change_auth_code(string old_pin, string new_pin) throws DBus.Error;

			public abstract void set_auth_code_required(bool check, string pin) throws DBus.Error;

			public abstract bool get_auth_code_required() throws DBus.Error;

			public abstract GLib.HashTable<string, GLib.Value?> get_sim_info() throws DBus.Error;

			public abstract string send_generic_sim_command(string command) throws DBus.Error;

			public abstract string send_restricted_sim_command(int command, int fileid, int p1, int p2, int p3, string data) throws DBus.Error;

			public abstract SIMHomezone[] get_home_zones() throws DBus.Error;

			public abstract string get_issuer() throws DBus.Error;

			public abstract string[] list_phonebooks() throws DBus.Error;

			public abstract GLib.HashTable<string, GLib.Value?> get_phonebook_info(string category) throws DBus.Error;

			public abstract SIMEntry[] retrieve_phonebook(string category) throws DBus.Error;

			public abstract void delete_entry(string category, int index) throws DBus.Error;

			public abstract void store_entry(string category, int index, string name, string number) throws DBus.Error;

			public abstract void retrieve_entry(string category, int index, out string name, out string number) throws DBus.Error;

			public abstract GLib.HashTable<string, GLib.Value?> get_messagebook_info() throws DBus.Error;

			public abstract SIMMessage[] retrieve_messagebook(string category) throws DBus.Error;

			public abstract string get_service_center_number() throws DBus.Error;

			public abstract void set_service_center_number(string number) throws DBus.Error;

			public signal void incoming_stored_message(int index);

			public abstract void delete_message(int index) throws DBus.Error;

			public abstract int store_message(string recipient_number, string contents, GLib.HashTable<string, GLib.Value?> properties) throws DBus.Error;

			public abstract void send_stored_message(int index, out int transaction_index, out string timestamp) throws DBus.Error;

			public abstract void retrieve_message(int index, out string status, out string sender_number, out string contents, out GLib.HashTable<string, GLib.Value?> properties) throws DBus.Error;
		}

		public struct SIMMessage {
			public int attr1;
			public string attr2;
			public string attr3;
			public string attr4;
			public GLib.HashTable<string, GLib.Value?> attr5;
		}

		public struct SIMHomezone {
			public string attr1;
			public int attr2;
			public int attr3;
			public int attr4;
		}

		public struct SIMEntry {
			public int attr1;
			public string attr2;
			public string attr3;
		}
	}
}
